
;; LumCity core
;; V. 1.0.0 - Nov. 2014
;; Small game based on SimCity, written in NetLogo
;; from Warlogo by Lois Vanhee, Fabien Hervouet and Jacques Ferber
;; authors : Silvere Gauthier, Lameira Yannick
;;
;; includes the BDI architecture from I. Sakellariou and the Warlogo communications

;; includes some libraries
__includes[ "lumcity-agents.nls" "warlogo-communications.nls" "bdi.nls" "lumcity-map.nls"]

breed [city_halls city_hall]
breed [police_stations police_station]
breed [fire_departments fire_department]
breed [houses house]
breed [factories factory]
breed [stores store]
breed [humans human]

;; Items are declared as objects (e.g. turtles out of the main loop). So they can more easily be
;; moved and their status are easier to maintain. It could have been handled with patches. 
breed [fires fire]
breed [trees tree]

;; A correct hierarchy should have avoided such redundancy
city_halls-own [ beliefs incoming-queue intentions ]
police_stations-own [ beliefs capacity incoming-queue intentions worker-quantity ]
fire_departments-own [ beliefs capacity incoming-queue intentions worker-quantity ]
houses-own [ beliefs capacity incoming-queue intentions people-quantity ]
factories-own [ beliefs capacity incoming-queue intentions worker-quantity ]
stores-own [ beliefs capacity incoming-queue intentions worker-quantity ]
humans-own [ beliefs blocked incoming-queue intentions money percepts residence speed work ]

patches-own [ area cost density lock road? ]

globals [ blocksize builds debug founds nb-humans ]


to setup
  clear-all
  
  ;; globals parameters
  set nb-humans 36
  set founds 100
  set blocksize round ((world-width - 8) / 13) ;; valeurs conseill√©es pour les dimensions : 69 et 49 ou multiples entiers
  set debug false
  set builds []
  
  ;; standard initialization
  set-default-shape city_halls "building institution"
  set-default-shape police_stations "police"
  set-default-shape fire_departments "fire department"
  set-default-shape houses "house"
  set-default-shape factories "factory"
  set-default-shape stores "building store"
  set-default-shape humans "person"
  
  make-map
  
  ;; make humans
  let i 0
  while [i < nb-humans]
  [
    set i i + 1
    make-human 28 0 -0.25 * blocksize
  ]
  
  ;; assign residences
  ask humans with [ residence = nobody ]
  [ 
    assign-residence one-of houses with [ people-quantity < capacity ]
  ]
  
  ask police_stations with [ worker-quantity < capacity ]
  [
    set i worker-quantity
    while [ i < capacity ]
    [
      recruit one-of humans with [ work = nobody ]
      set i i + 1
    ]
  ]
  
  ask fire_departments with [ worker-quantity < capacity ]
  [
    set i worker-quantity
    while [ i < capacity ]
    [
      recruit one-of humans with [ work = nobody ]
      set i i + 1
    ]
  ]
  
  ask stores with [ worker-quantity < capacity ]
  [
    set i worker-quantity
    while [ i < capacity ]
    [
      recruit one-of humans with [ work = nobody ]
      set i i + 1
    ]
  ]
  
  ask factories with [ worker-quantity < capacity ]
  [
    set i worker-quantity
    while [ i < capacity ]
    [
      recruit one-of humans with [ work = nobody ]
      set i i + 1
    ]
  ]
  
  ;; setting initial heading for moving agents
  ask humans [set-random-heading]
  
  reset-ticks
end


;; MAIN LOOP
to go
  if (count humans = 0 or founds <= 0) [
    print "game over !"
    beep
    stop 
  ]
  tick
  
  ask city_halls [ run city_hall-action ]
  ask police_stations [ run police_station-action ]
  ask fire_departments [ run fire_department-action ]
  ask houses [ run house-action ]
  ask factories [ run factory-action ]
  ask stores [ run store-action ]
  ask humans [ run human-action ]
  
  while [ builds != [] ]
  [
    let x first builds
    set builds but-first builds
    let y first builds
    set builds but-first builds
    
    make-house x y
    ask humans with [ xcor = x and ycor = y ] [ assign-residence one-of houses-here ]
  ]
  
  ask humans [ earn-money ]
  
  increase-founds
  decrease-founds
  plot Founds
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTIONS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to move
  let last-move-lenght 0
  while [last-move-lenght < speed] [
    fd 1
    set last-move-lenght last-move-lenght + 1
    if any? other turtles-here with [is-colliding? myself] or hitting-north-wall? self or hitting-south-wall? self or hitting-east-wall? self or hitting-west-wall? self
    [ set blocked true ]
  ]
end


to idle
end

;; reserved to factories, stores or services
to recruit [ h ]
  let s "person"
  ifelse(member? self police_stations) [ set s "person police" ]
  [ ifelse(member? self fire_departments) [ set s "person fire" ]
    [ ifelse(member? self stores) [ set s "person service" ]
      [ if(member? self factories) [ set s "person construction" ]]]]
  if(worker-quantity < capacity and h != nobody)
  [
    set worker-quantity worker-quantity + 1
    let w self
    ask h [ set work w set shape s]
  ]
end

;; reserved to humans
to quit
  if(work != nobody)
  [
    ask work [ set worker-quantity worker-quantity - 1 ]
    set work nobody
  ]
end

;; reserved to humans
to install-house
  let h one-of houses-here
  ifelse(h = nobody)
  [ 
    if(not lock and money > cost)
    [
      set builds lput xcor builds
      set builds lput ycor builds
      set money money - cost
    ]
  ]
  [
    set residence h
  ]
end

;; reserved to humans
to assign-residence [ h ]
  set residence h
  if(h != nobody)
  [
    ask h [ set people-quantity people-quantity + 1 ]
  ]
end

;; reserved to humans
to earn-money
  if(work != nobody and member? work turtles in-radius blocksize)
  [
    set money money + 10
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;COMMUNICATION;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to send-message [receiver performative content]
  let msg create-message performative content
  send receiver msg
end


to reply [input-msg performative content]
  if show-messages [ show (sentence "Reply: " performative content " to: " (get-sender input-msg)) ]
  let msg create-message performative content
  send (get-sender input-msg) msg
end

to broadcast-message [lst performative content]
  let msg create-message performative content
  broadcast lst msg
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;TESTING OPERATIONS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to-report is-building? [a]
  report is-city_hall? a or is-police_station? a or is-fire_department? a or is-house? a or is-factory? a or is-store? a
end

to-report in-front? [a]
  report member? a ([percepts] of myself) in-cone 2 10
end

to-report hitting-north-wall? [a]
  report [pycor] of a = max-pycor
end

to-report hitting-south-wall? [a]
  report [pycor] of a = min-pycor
end

to-report hitting-east-wall? [a]
  report [pxcor] of a = max-pxcor
end

to-report hitting-west-wall? [a]
  report [pxcor] of a = min-pxcor
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SENSING;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to-report get-heading
  report heading
end


to-report blocked?
  report blocked
end


to-report _perceive
  report other turtles in-radius 2
end

to-report perceive
  report percepts
end


to-report is-colliding? [o]
  report distance o < (size + [size] of o) / 3
end


to-report headed-towards? [o]
  report towards o = heading
end


to set-heading [a]
  if a != nobody [
  ifelse is-turtle? a
  [set heading towards a]
  [set heading a]
  ]
end


to set-random-heading
  set heading random 360
end


to-report in-house?
  report any? houses with [is-colliding? myself]
end


to-report get-closest [l]
  report min-one-of l [distance myself]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;INTERFACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to increase-founds
  ask humans [ 
    let taxe money * Taxe-per-human / 100
    set money money - taxe
    set founds founds + taxe
  ]
end

to decrease-founds
  set founds founds - (count turtles - count humans) * City-entretien / 100
end
