;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CITY_HALL BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report city_hall-action
  let wl sum [capacity - worker-quantity] of factories with [ density = "low" ] + sum [capacity - worker-quantity] of stores with [ density = "low" ]
  let wa sum [capacity - worker-quantity] of factories with [ density = "average" ] + sum [capacity - worker-quantity] of stores with [ density = "average" ]
  let wh sum [capacity - worker-quantity] of factories with [ density = "high" ] + sum [capacity - worker-quantity] of stores with [ density = "high" ]
  
  let hl count humans with [ work = nobody and prefered_density = "low" ]
  let ha count humans with [ work = nobody and prefered_density = "average" ]
  let hh count humans with [ work = nobody and prefered_density = "high" ]
  
  let mw max (list wl wa wh)
  let d false
  if( wl = mw and wl < hl ) [ set d "low" ]
  if( wa = mw and wa < ha ) [ set d "average" ]
  if( wh = mw and wh < hh ) [ set d "high" ]
  
  if( d != false )
  [
    let p one-of patches with [ lock = false and density = d and (area = "industry" or area = "store") ]
    if(p != nobody and funds > 10 * [cost] of p)
    [
      report "install-work"
    ]
  ]
  
  report "idle"
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; POLICE_STATION BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report police_station-action
  if(worker-quantity > capacity) [ report "kick" ]
  if(worker-quantity < capacity) [ report "recruit" ] 
  report "idle"
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; FIRE_DEPARTMENT BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report fire_department-action
  if(worker-quantity > capacity) [ report "kick" ]
  if(worker-quantity < capacity) [ report "recruit" ]
  report "idle"
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; HOUSE BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report house-action
  ;; to be written 
  report "idle"
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; FACTORY BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report factory-action
  ifelse(worker-quantity < capacity) [ report "recruit" ] [ report "idle" ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; STORE BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report store-action
  ifelse(worker-quantity < capacity) [ report "recruit" ] [ report "idle" ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; HUMAN BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report human-action
  let s self
  
  ;; FIREMAN ACTION
  let fireman (work != nobody and member? work fire_departments)
  
  let f min-one-of fires in-radius blocksize [distance myself]
  if (f != nobody)
  [
    ifelse (fireman)
    [
      ifelse (is-colliding? f) 
      [ 
        report "stop-fire"
      ]
      [
        face f
        report "move"
      ]
    ]
    [
      set-random-heading
      report "move"
    ]
  ]
  
  ;; POLICEMAN ACTION
  let policeman (work != nobody and member? work police_stations)
  
  let k min-one-of humans with [ killer = true ] in-radius blocksize [distance myself]
  if (k != nobody and killer = false)
  [
    ifelse (policeman)
    [
      ifelse (is-colliding? k) 
      [ 
        report "arrest-killer"
      ]
      [
        face k
        report "move"
      ]
    ]
    [
      set-random-heading
      report "move"
    ]
  ]
  
  ;; QUIT
  if (round(money) <= 0) [ report "quit" ]
  
  ;; RESIDENCE SEARCH
  if (residence = nobody)
  [
    let h one-of houses with [ is-colliding? s and people-quantity < capacity ]
    ifelse(h != nobody)
    [ 
      report "install-house"
    ]
    [
      set h min-one-of houses in-radius blocksize with [ people-quantity < capacity ] [distance myself]
      ifelse (h != nobody)
      [
        face h
        report "move"
      ]
      [
        ifelse(area = "home" and density = prefered_density and lock = false and money > cost)
        [ 
          report "install-house"
        ]
        [
          let m money
          let d prefered_density
          let p min-one-of patches in-radius blocksize with [ area = "home" and density = d and lock = false and cost < m ] [distance myself]
          if (p != nobody) 
          [ 
            face p
            report "move"
          ]
        ]
      ]
    ]
  ]
  
  ;; KILLER ACTION
  ifelse(killer = true and one-of humans with [ is-colliding? s and self != s and work != nobody and not member? work police_stations] != nobody)
  [ 
    report "kill" 
  ]
  ;; MOVE ON ROAD
  [
    let r one-of patches in-cone 2 180 with [ road? ]
    if (r = nobody) [ set r one-of patches in-radius 2 with [ road? ] ]
    ifelse (r != nobody) [ face r ] [ face min-one-of patches with [ road? ] [distance myself] ]
    report "move"
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
